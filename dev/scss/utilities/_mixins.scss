// CSS Vendor Prefix
// eg: @include vendor-prefix(background-size, cover);
@mixin vendor-prefix($name, $argument) {
    -webkit-#{$name}: #{$argument};
    -ms-#{$name}: #{$argument};
    -moz-#{$name}: #{$argument};
    -o-#{$name}: #{$argument};
    #{$name}: #{$argument};
}
//Responsive

@mixin respond($breakpoint){

    @if $breakpoint == phone-sm{
        @media(max-width:410px) {@content};
    }

    @if $breakpoint == phone-md{
        @media(max-width:450px) {@content};
    }

    @if $breakpoint == phone-lg{
        @media(max-width:600px) {@content};
    }

    @if $breakpoint == phone{
    @media(max-width:768px) {@content};
    }

    @if $breakpoint == tab-port{
        @media(max-width:992px) {@content};
    }

    @if $breakpoint == tab-land{
        @media(max-width:1200px) {@content};
    }
    //Big Desktops
    @if $breakpoint == big-desk{
        @media(min-width:1800px) {@content};
    }

}


// Font Size
// eg: @include font-size(1); = 10px | 1rem
@mixin font-size($sizeValue: 1.6) {
    font-size: ($sizeValue * 10) + px;
    font-size: $sizeValue + rem;
}

// Font Family
// eg: @include font($base-font, normal, 400);
@mixin font($font, $style: normal, $weight: normal) {
    font-family: $font;
    font-style: $style;
    font-weight: $weight;
}

// PV Icons Pseudo
// eg: @include pv-theme-pseudo; [within the pseudo class]
@mixin pv-theme-pseudo {
    position: absolute;
    @include font($pv-theme-icons, normal, normal);
}

// Font Smoothing
// eg: include font-smoothing(on);
@mixin font-smoothing($value: on) {
    @if $value==on {
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }
    @if $value==off {
        -webkit-font-smoothing: subpixel-antialiased;
        -moz-osx-font-smoothing: auto;
    }
}

// Links Mixin
// eg: @include links($color-link, $color-link, $color-link-hover, $color-link);
@mixin links($link, $visited, $hover, $active) {
    & {
        color: $link;
        &:visited {
            color: $visited;
        }
        &:hover {
            color: $hover;
            text-decoration: none;
        }
        &:active,
        &:focus {
            color: $active;
            text-decoration: none;
        }
    }
}

// Truncating
// eg: @include ellipsis(2em, 2);
@mixin ellipsis ($max-height, $lines: 2) {
    overflow: hidden;
    max-height: $max-height;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $lines;  
    text-overflow: -o-ellipsis-lastline;
  }

// Positioning
// eg: @include position(absolute, $top: 5px, $left: 5px);
@mixin position($position, $top: null, $right: null, $bottom: null, $left: null) {
    position: $position;
    top: $top;
    left: $left;
    right: $right;
    bottom: $bottom;
}

// Placeholder
// eg: @include placeholder($color-base);
@mixin placeholder($color: $input-color-placeholder) {
    &::-moz-placeholder {
        color: $color;
    } // Firefox 19+
    &:-ms-input-placeholder {
        color: $color;
    } // Internet Egplorer 10+
    &::-webkit-input-placeholder {
        color: $color;
    } // Safari and Chrome
}

// Rotate
// eg: @include rotate(45deg);
@mixin rotate($degrees) {
    -webkit-transform: rotate($degrees);
    -moz-transform: rotate($degrees);
    transform: rotate($degrees);
}

// Translate 3D Transition
// eg: @include translate3d(0,0,0);
@mixin translate3d($x, $y, $z) {
    -webkit-transform: translate3d($x, $y, $z);
    -moz-transform: translate3d($x, $y, $z);
    transform: translate3d($x, $y, $z);
}

// Border Radius
// eg: @include border-radius(3px); | @include border-radius(5px 5px 0 0);
@mixin border-radius($radius) {
    @include vendor-prefix(border-radius, $radius);
}

// User Select

/* eg: @include user-select(none); */

@mixin user-select($user-select) {
    -webkit-user-select: ($user-select);
    -moz-user-select: ($user-select);
    -ms-user-select: ($user-select);
    user-select: ($user-select);
}

// Background Opacity mixin | Add opacity to a background color
// eg. @include bg-opacity($color-white, .5);
@mixin bg-opacity($color, $opacity) {
    background-color: rgba($color, $opacity);
}

// Cross browser opacity
// eg. @include opacity(0.8);
@mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie); //IE8
}

// 100% circle
// eg. @include circle(100px);
@mixin circle($size) {
    width: $size;
    height: $size;
    @include vendor-prefix(border-radius, 100%);
}

// Box Shadow
// eg. @include box-shadow(0 5px 4px black(.75)); || [@include box-shadow(0 5px 4px black(.75)); || @include box-shadow(inset 0 5px 4px black(.75));] || @include box-shadow(inset 0 0px 0px 2px $color-15);
@mixin box-shadow($value) {
    @include vendor-prefix(box-shadow, $value);
}

// Text Shadow
// eg. @include text-shadow(0 0 0);
@mixin text-shadow($value) {
    @include vendor-prefix(text-shadow, $value); //text-shadow: text-shadow($value);
}

// Box Sizing 
// eg. @include box-sizing(border-box);
@mixin box-sizing($box-model) {
    @include vendor-prefix(box-sizing, $box-model);
}

// Calc
// eg. @include calc(width, “100% - 50px”);
@mixin calc($property, $expression) {
    #{$property}: -webkit-calc(#{$expression});
    #{$property}: calc(#{$expression});
}

// Transition 
// eg. @include transition(all,2s,ease-out);
@mixin transition($what: all, $time: 0.7s, $how: ease-in-out) {
    @include vendor-prefix(transition, $what $time $how);
}

// Vertically center with Table
// eg. @include vertical-center-tbl(130px); || @include vertical-center-tbl(100%);
@mixin vertical-center-tbl($content) {
    height: $content;
    display: table;
    >* {
        display: table-cell;
        vertical-align: middle;
        float: none;
    }
}

// Vertically center with Absolute Position
// eg. @include centerer(false, true);[Centering vertically]
// eg. @include centerer(true, false);[Centering horizontally]
// eg. @include centerer;[Centering Both Side]
@mixin centerer($horizontal: true, $vertical: true) {
    position: absolute;
    @if ($horizontal and $vertical) {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
    @else if ($horizontal) {
        left: 50%;
        transform: translate(-50%, 0);
    }
    @else if ($vertical) {
        top: 50%;
        transform: translate(0, -50%);
    }
}

// Triangle
// eg.  @include triangle within a pseudo element and add positioning properties (ie. top, left)
// $direction: up, down, left, right
// eg. @include triangle(up, 10px, $color-white);
@mixin triangle($direction, $size, $color) {
    content: '';
    display: block;
    position: absolute;
    height: 0;
    width: 0;
    @if ($direction=='up') {
        border-bottom: $size solid $color;
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: none;
    }
    @else if ($direction=='down') {
        border-top: $size solid $color;
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: none;
    }
    @else if ($direction=='left') {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
        border-left: none;
    }
    @else if ($direction=='right') {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
        border-right: none;
    }
    @else if ($direction=='right-side') {
        border-top: $size solid $color;
        border-bottom: $size solid transparent;
        border-left: $size solid transparent;
        border-right: 0;
    }
}

// Gradinets[Linear]
// @include linearGradient-t2b($color-brand-primary, $color-brand-secondary);
@mixin linearGradient-t2b($top, $bottom) {
    background: $top;
    /* Old browsers */
    background: -moz-linear-gradient(top, $top 0%, $bottom 100%);
    /* FF3.6+ */
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, $top), color-stop(100%, $bottom));
    /* Chrome,Safari4+ */
    background: -webkit-linear-gradient(top, $top 0%, $bottom 100%);
    /* Chrome10+,Safari5.1+ */
    background: -o-linear-gradient(top, $top 0%, $bottom 100%);
    /* Opera 11.10+ */
    background: -ms-linear-gradient(top, $top 0%, $bottom 100%);
    /* IE10+ */
    background: linear-gradient(to bottom, $top 0%, $bottom 100%);
    /* W3C */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#ffffff', endColorstr='#000000', GradientType=0);
    /* IE6-9 */
}

// Background Gradient: Left to Right
// @include linearGradient-l2r($color-brand-primary, $color-brand-secondary);
@mixin linearGradient-l2r($from-color, $to-color) {
    background-color: mix($from-color, $to-color);
    /* Fallback */
    background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from($from-color), to($to-color));
    background-image: -webkit-linear-gradient(left, $from-color, $to-color);
    background-image: -moz-linear-gradient(left, $from-color, $to-color);
    background-image: -ms-linear-gradient(left, $from-color, $to-color);
    background-image: -o-linear-gradient(left, $from-color, $to-color);
    -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorStr='$from-color', EndColorStr='$to-color')";
}

// Gradinets[radial]
@mixin radialGradient($from, $to) {
    background: -moz-radial-gradient(center, circle cover, $from 0%, $to 100%);
    background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%, $from), color-stop(100%, $to));
    background: -webkit-radial-gradient(center, circle cover, $from 0%, $to 100%);
    background: -o-radial-gradient(center, circle cover, $from 0%, $to 100%);
    background: -ms-radial-gradient(center, circle cover, $from 0%, $to 100%);
    background: radial-gradient(center, circle cover, $from 0%, $to 100%);
    background-color: $from;
}

// Gradinets[Linear]
// @include linear-gradient-b(135deg, $color-brand-primary, $color-brand-secondary);
// l2br: left to bottom right
@mixin linear-gradient-l2br($args...) {
    background-image: -o-linear-gradient($args);
    background-image: -moz-linear-gradient($args);
    background-image: -webkit-linear-gradient($args);
    background-image: linear-gradient($args);
}

// Retina Images
// @include imgRetina(logo, png, 100px, 40px); || output: logo.png; width: 100px; height: 40px;
@mixin imgRetina($image, $extension, $width, $height) {
    background: url($image + '.' + $extension) no-repeat;
    width: $width;
    height: $height;
    @media (min--moz-device-pixel-ratio: 1.3), (-o-min-device-pixel-ratio: 2.6/2), (-webkit-min-device-pixel-ratio: 1.3), (min-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
        background-image: url($image + '-2x' + '.' + $extension) no-repeat;
        background-size: $width $height;
    }
}

//Flexbox
//@include flexbox();
@mixin flexbox {
    display: -webkit-box; // old
    display: -moz-box; // old
    display: -ms-flexbox; // ie
    display: -webkit-flex; // new
    display: flex; // new
}

// Filters for Images [@include filter(grayscale, 100%);]
// grayscale      ex: filter: grayscale(100%);
// sepia          ex: filter: sepia(100%);
// saturate       ex: filter: saturate(0%);
// hue-rotate     ex: filter: hue-rotate(45deg);
// invert         ex: filter: invert(100%);
// brightness     ex: filter: brightness(15%);
// contrast       ex: filter: contrast(200%);
// blur           ex: filter: blur(2px);
@mixin filter($filter-type, $filter-amount) {
    @include vendor-prefix(filter, $filter-type+unquote('(#{$filter-amount})'));
}

// Scale
@mixin transform($content) {
    @include vendor-prefix(transform($content));
}

// @include first-child(){background: red;}
@mixin first-child() {
    &:first-of-type {
        @content;
    }
}

@mixin last-child() {
    &:last-of-type {
        @content;
    }
}

// Text select mixin
// For User selection [ * {@include textSelection {color: red;}} ]
@mixin textSelection {
    &::selection {
        @content;
    }
    &::-moz-selection {
        @content;
    }
}

// Animations and keyframes
//@include keyframes(slide-down) {
//    0% { opacity: 1; }
//    90% { opacity: 0; }
//}
@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content;
    }
    @-moz-keyframes #{$name} {
        @content;
    }
    @-ms-keyframes #{$name} {
        @content;
    }
    @-o-keyframes #{$name} {
        @content;
    }
    @keyframes #{$name} {
        @content;
    }
}

//[@include animation (loader 3s 300ms infinite ease-out);]
//@include animation('slide-down 5s 3');
@mixin animation($value) {
    @include vendor-prefix(animation, $value);
}

@mixin fill{
    max-width: 100%;
    height: 100%;
}